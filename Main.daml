module Main where 
import DA.Text (sha256)

type AuctionAccId = ContractId AuctionAcc
type BidAuctionId = ContractId BidAuction

data Cash = Cash with
    value: Numeric 2 
    currency: Text 
        deriving (Show, Eq, Ord)

data Password = Password with
    value: Text
        deriving (Show, Eq, Ord)

class Encryptable i o where
    encrypt : i -> o

instance Encryptable Password Text  where
    encrypt p = sha256 p.value  

template AuctionAcc
    with
        auctioneer: Party
        bidder: Party
        
        bidderId: Text
        bidderName: Text
        bidderPhone: Optional Text
        isVerified: Bool
        accBalance: Cash 
        password : Text
    
    where
        signatory auctioneer
        observer bidder

        key (auctioneer, bidderId): (Party, Text)
        maintainer key._1

        choice CreateAcc: AuctionAccId
            with
                appBidderId: Text
                appBidderName: Text
                appBidderPhone: Optional Text  
                appPassword: Text
            controller bidder
            do
                -- assertMsg "Account already exists" (not exists lookupByKey @AuctionAcc (auctioneer, bidderId))
                create this with
                    bidderId = appBidderId 
                    bidderName = appBidderName
                    bidderPhone = appBidderPhone  
                    password = encrypt (Password appPassword)
                    
        choice VerifyAcc: AuctionAccId
            with
                isVerified: Bool
            controller auctioneer
            do
                -- assertMsg "Account does not exist" (exists @AuctionAcc (auctioneer, bidderId))
                assertMsg "Account already verified" isVerified 
                create this with
                    isVerified = True 
        
        choice Deposit: AuctionAccId
            with
                amount: Numeric 2 
            controller bidder
            do 
                assertMsg "Account not verified" ( isVerified)
                assertMsg "Deposit amount must be positive" (amount > 0.0)
                create this with
                    accBalance.value = accBalance.value + amount

template BidAuction
    with
        auctioneer: Party
        bidder : [Party] -- List of bidders participating in the auction
        bids: [(Party, Numeric 2)] -- List of bids with the bidder and their bid amount
        itemName: Text
        itemDetails: Text
        reservePrice: Cash
        highestBid: Cash
        highestBidder: Optional Party
        endDate: Date
        isActive: Bool

    where
        signatory auctioneer
        observer bidder -- Observers are the bidders

        key (auctioneer, itemName): (Party, Text)
        maintainer key._1 

        ensure reservePrice.value /= 0.0 -- Reserve price cannot be zero

        -- Choice Bid - Allows bidders to place bids on the auction
        choice Bid: ContractId BidAuction
            with
                bidAmount: Numeric 2
                bidder: Party
                bidderId: Text
            controller bidder -- Only the bidder can exercise the Bid choice
            do
                -- Check if the auction is active
                assertMsg "Auction is not active" isActive

                -- Check if the bid amount is greater than the current highest bid
                assertMsg "Bid amount must be greater than the current highest bid. " (bidAmount > highestBid.value)

                -- Check if the bidder has enough balance in their AuctionAcc
                bidderAcc <- fetchByKey @AuctionAcc (auctioneer, bidderId)
                assertMsg "Bidder does not have a verified AuctionAcc" bidderAcc._2.isVerified
                let accBalVal = bidderAcc._2.accBalance.value
                assertMsg "Bidder does not have enough balance to place the bid" (accBalVal >= bidAmount)

                -- Check if the bid amount is greater than the reserve price
                if(bidAmount >= reservePrice.value)
                    then do
                     
                -- Update the list of bids with the new bid
                    create this with
                        bids = (bidder, bidAmount) :: bids
                        highestBidder = Some bidder
                        highestBid.value = bidAmount
                        highestBid.currency = "USD"
                        isActive = False
                else do
                    -- Update the list of bids with the new bid
                    create this with
                        bids = (bidder, bidAmount) :: bids
                        highestBidder = Some bidder
                        highestBid.value = bidAmount
                        highestBid.currency = "USD" 

        choice Cancel: BidAuctionId
            controller auctioneer
            do
                assertMsg "Auction is not active" isActive
                create this with
                    isActive = False
                    
        -- non consuming choice to get all the bids
        nonconsuming choice GetBids: [(Party, Numeric 2)]
            controller auctioneer, bidder
            do
                return bids
 